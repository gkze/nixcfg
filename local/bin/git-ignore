#!/usr/bin/env python3
# vi: ft=python
from __future__ import annotations

import base64
import json
import sys
from urllib.request import urlopen
from urllib.error import HTTPError

GITIGNORE_URL: str = "https://api.github.com/repos/github/gitignore/contents"


class GitignoreNotFound(Exception):
    def __init__(self, language: str, *args: object) -> None:
        super().__init__(f"gitignore for {language} not found!")


def list_gitignores() -> list[str]:
    return [
        blob["path"].rstrip(".gitignore")
        for blob in json.load(urlopen(GITIGNORE_URL))
        if blob["path"].endswith(".gitignore")
    ]


def get_gitignore(language: str) -> str | None:
    try:
        # fmt: off
        return base64.b64decode(json.load(urlopen(
            (GITIGNORE_URL + "/{language}.gitignore").format(
                language=language[0].upper() + language[1:]
            )
        ))["content"]).decode()
        # fmt: on

    except HTTPError as e:
        if e.code == 404:
            raise GitignoreNotFound(language)


def main(argv: list[str]) -> int:
    if len(argv) > 1:
        raise RuntimeError("Cannot request more than 1 .gitignore template at a time!")

    if len(argv) == 0:
        for gi in list_gitignores():
            print(gi)

        return 0

    print(get_gitignore(argv[0]))
    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
