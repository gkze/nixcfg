#!/usr/bin/env python
# vi: ft=python
# .gitignore creation utility
from __future__ import annotations

import base64
import json
import sys
from urllib.request import urlopen
from urllib.error import HTTPError

GITIGNORE_URL: str = "https://api.github.com/repos/github/gitignore/contents"


class GitignoreNotFound(Exception):
    def __init__(self, language: str, *args: object) -> None:
        super().__init__(f"gitignore for {language} not found!", *args)


def list_gitignore_languages() -> list[str]:
    return [
        blob["path"].rstrip(".gitignore") for blob in json.load(urlopen(GITIGNORE_URL))
    ]


def get_gitignore(language: str) -> str | None:
    try:
        return base64.b64decode(
            json.load(urlopen(f"{GITIGNORE_URL}/{language.capitalize()}.gitignore"))[
                "content"
            ]
        ).decode()

    except HTTPError as e:
        if e.code == 404:
            raise GitignoreNotFound(language)


def main(argv: list[str]) -> int:
    if len(argv) > 1:
        raise RuntimeError("Cannot request more than 1 .gitignore template at a time!")

    if len(argv) == 0:
        for language_gitignore in list_gitignore_languages():
            print(language_gitignore)

        return 0

    print(get_gitignore(argv[0]))
    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
